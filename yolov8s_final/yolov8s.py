# -*- coding: utf-8 -*-
"""yolov8s.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wCO2a4kVhoqqoWE19FK5rI-j86JHIJPG
"""

!pip install ultralytics opencv-python tensorflow keras scikit-learn matplotlib

from ultralytics import YOLO
import cv2
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix, precision_score, recall_score, f1_score, accuracy_score
import matplotlib.pyplot as plt

from ultralytics import YOLO
import os

# Check if GPU is available
import torch
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using device: {device}")

# Step 1: Load YOLOv8 Pretrained Model
model = YOLO("yolov8s.pt")  # Use 'yolov8s.pt', 'yolov8m.pt', etc., for larger models



from google.colab import drive
drive.mount('/content/drive')

import zipfile
zip_path =  '/content/drive/MyDrive/combine.zip' # Replace with your ZIP file's path
extract_path = '/content/drive/My Drive/Folder/extracted'  # Replace with your desired extraction folder

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print(f"ZIP file extracted to: {extract_path}")

# Path to your data.yaml file (modify if needed)
data_yaml_path = '/content/drive/MyDrive/Folder/extracted/combine/data.yaml'

# Check if the file exists
if os.path.exists(data_yaml_path):
    print(f"Found dataset configuration: {data_yaml_path}")
else:
    raise FileNotFoundError("data.yaml file not found!")

# Load a pre-trained YOLOv8 model (e.g., yolov8n.pt, yolov8s.pt, etc.)
model = YOLO('yolov8s.pt')  # 'yolov8n.pt' is the nano model; you can choose 's', 'm', 'l', 'x' for different sizes

# Training parameters
results = model.train(
    data=data_yaml_path,    # Path to your dataset YAML file
    epochs=10,              # Number of epochs for training
    batch=16,               # Batch size
    imgsz=640,              # Input image size
    device=device,          # Use CUDA if available
    project='yolov8_results',  # Project folder for saving results
    name='custom_training',   # Experiment name
    pretrained=True         # Use pretrained weights
)

# Path to the trained weights (best.pt)
trained_weights = 'yolov8_results/custom_training/weights/best.pt'

# Load the trained model
model = YOLO(trained_weights)

# Evaluate the model on the validation set
metrics = model.val(
    data=data_yaml_path,  # Dataset YAML file
    imgsz=640,            # Image size
    batch=16,             # Batch size for evaluation
    device=device         # Device to use for evaluation
)

print("Evaluation completed!")
print(metrics)

import cv2
import matplotlib.pyplot as plt

# Example image to test
test_image_path = '/content/drive/MyDrive/Folder/extracted/combine/test/images/*.jpg'

# Load and predict
results = model(test_image_path)

# Display the results
result_image = results[0].plot()  # Plot the results on the image
plt.imshow(cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

from ultralytics import YOLO
import matplotlib.pyplot as plt


# Path to the test dataset
test_data_path = '/content/drive/MyDrive/Folder/extracted/combine/data.yaml'  # Path to your test dataset YAML file

import glob  # Import glob module
import matplotlib.pyplot as plt

# Path to test image(s)
test_image_path =  '/content/drive/MyDrive/Folder/extracted/combine/test/images/*.jpg'  # Replace with your folder path
test_images = glob.glob(test_image_path)

# Run predictions and visualize results
for img_path in test_images:
    results = model(img_path)  # Predict on image

    # Each result is a single prediction object
    for result in results:
        result.show()  # Display predictions
        # Save output image
        save_path = img_path.replace(".jpg", "_output.jpg")
        result.save(filename=save_path)
        print(f"Saved output image: {save_path}")

print("Testing complete. Predictions displayed and saved.")

